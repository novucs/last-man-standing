package com.daegonner.lms.reward;

import com.daegonner.lms.util.ItemFactory;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Chest;
import org.bukkit.block.DoubleChest;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * When granted, provides an item generated by the {@link ItemFactory}.
 */
public class ItemReward implements Reward {

    private final ItemFactory itemFactory;

    public ItemReward(ItemFactory itemFactory) {
        this.itemFactory = itemFactory;
    }

    @Override
    public void grant(Player player, Inventory inventory) {
        Location location = getLocation(inventory, player.getLocation());
        Optional<ItemStack> created = itemFactory.create();
        if (created.isPresent()) {
            inventory.addItem(created.get()).forEach((amount, item) -> {
                item.setAmount(amount);
                player.getWorld().dropItemNaturally(location, item);
            });
        }
    }

    /**
     * Attempts to find the location of an {@link Inventory}, otherwise uses
     * the default location.
     *
     * @param inventory the {@link Inventory} to get the location of.
     * @param def       the default location.
     * @return the inventory location.
     */
    private Location getLocation(Inventory inventory, Location def) {
        if (inventory.getHolder() instanceof Chest) {
            return ((Chest) inventory.getHolder()).getLocation();
        }

        if (inventory.getHolder() instanceof DoubleChest) {
            return ((DoubleChest) inventory.getHolder()).getLocation();
        }

        return def;
    }

    @Override
    public Map<String, Object> serialize() {
        Map<String, Object> target = new HashMap<>();
        target.put("type", RewardType.ITEM.name().toLowerCase());

        if (itemFactory.getMaterial() != Material.AIR) {
            target.put("material", itemFactory.getMaterial().name().toLowerCase());
        }

        if (itemFactory.getData() != 0) {
            target.put("data", itemFactory.getData());
        }

        if (itemFactory.getMax() > -1) {
            target.put("amount.max", itemFactory.getMax());
        }

        if (itemFactory.getMin() != 0) {
            target.put("amount.min", itemFactory.getMin());
        }

        if (itemFactory.getName() != null) {
            target.put("name", itemFactory.getName());
        }

        if (itemFactory.getLore() != null) {
            target.put("lore", itemFactory.getLore());
        }

        if (itemFactory.getEnchantments().isEmpty()) {
            for (Map.Entry<Enchantment, Integer> entry : itemFactory.getEnchantments().entrySet()) {
                target.put("enchantments." + entry.getKey().getName().toLowerCase(), entry.getValue());
            }
        }

        return target;
    }
}
